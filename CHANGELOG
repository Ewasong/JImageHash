- Semantic versioning




## [3.0.0] - Unreleased

### Added
 - Categorical Matcher. (Clustering matcher)
 - Weighted Categorical Matcher (much slower but takes into account more or less important bits)
 - RandomForestInMemoryImageMatcherGiny for testing purposes

### Changed
 - Move from float to double precision for algorithm settings.
 - moved TestData class to individual class to allow usage in other parts of the program.
 - renamed TestData to LabeledImage
 - make h2 dependency optional. (extract h2 into a separate class)
 - AColorHash AKernelHash and Median hash now inherit from AverageHash reducing duplicate code
 
 ### Fixed
 - AverageKernelHash now correctly computes it's hash based on the filtered luminocity compare to the average value instead 
 of the filtered value compared to the unfiltered value. Now it works more closely in line with aHash


## [2.1.1] 25.12.2018

### Updated
 - Bump Utility code version to 1.5.3 to support custom and exotic image color models.
 
## [2.1.0] 3.12.2018

### Changed
 - DatabaseImageMatcher now checks if an image with the id already exists before adding the image. 
 - refactor database image matcher tests to fail on sql exception rather than printing stack traces
 
## [2.0.2] 2.12.2018

### Changed
  - Bump version of compiler (3.8.0) 
  - Bum version of source and javadoc (3.0.1) maven plugin 
  - Bump version of Surefire plugin (3.0.0-M1)
  - Specify html 5 as default javadoc version.

### Added
 Database image matcher: 
  create default matcher with string constructors
  - add Images String batch operation.
  - add Images with files string batch operatio
  - getAllMatchingImages. Method to retrieve all images which matches any other image in the entire database
  - getMatchingImagesWithinDistance utility method to circumvent threshold settings.
  
### Fixed
 - unused imports removed in multiple files
 - ignore multiple deprecation warnings were applicable

## [2.0.1] 30.11.2018

### Fixed
- Update to UtilityCode 1.5.1 which excludes test resources which got added accidentally due to mvn:clean not being executed before deployment

## [2.0.0] 29.11.2018

#### Note
	- Development of version 2.0.0 was a bit all over the place. Commits are out of order and the changelog wasn't accuratly tracked.
	Starting now a more tracable documentation and commit behaviour will be enforced.

### Fixed

- Breaking change
	- rename hemming to hamming distance
	- rename getElementsWithinHemmingDistance to getElementsWithinHammingDistance in binaryTree

- Bumped dependency of github.kilianB.UtilityCode to 1.5.0 utilizing the fix in getScaledImage instance which 
would fall back to the old jdk 1 awt implementation decreasing speed by a factor of 600. As well as supporting multiple image types

 - removed unnecessary computation of grayscale image in difference hash
 - difference hash now computes the padding byte correctly
 - Typo in hashing algorithm "bitResoluation" -> "bitResolution". Since this is a protected field
 which most likely is used in any derived hashing algorithm this is classified as a breaking change!
 - Due to a major version bump the dHash will be revisited and it's implementation
 might change to not waste one bit. This will lead to all created hashes so far to be invalidated. The algorithm id of dHash will be updated
 accordingly.

### Changed

- Update JUnit to 5.3.1
- The hashing algorithm was refactored and now has to implement a different method signature returning a big integer instead of a hash object. 
	In preparation to drop the no information 1 padding bit
- Starting with version 2 hashes now use Luminosity as given by YCrCb instead of interpolated grayscale values.
- The bitResolution argument in hashing algorithms now follows the contract that the resulting hash has at least the number of bits specified.. All hash algorithms are updated to follow the earlier mentioned rule. 
  Additionally the precomputation step of images now allows a 1 pixel deviation between width and height to allow for closer matching images.
- Hash classes migrate to use FastPixel access speeding up creation of higher key hashes by magnitude
- test cases to reflect changes
- the algorithm id of each algorithm is altered to reflect incompatibility.
- default image matchers have different thresholds due to changed key precisions returned by default algorithm settings

### Added
 - Minor javadocs addition
 - dependency on UtilityCode com.github.kilianB
 - Hashing algorithms are serializable 
 - Rotational Invariant hasher (RotPHash, Rotational)
 - WIP - Hog-Hash
 - Database image matcher
 - Algorithm Benchmarker
 - add equals and hashcode to image matcher
 - ImageMatcher results now also reference  the normalized distance
 - CummulativeInMemoryMatcher
 - getBit and getBitUnsafe to Hash.java to retrieve individual bits without needing to access the underlying big integer object. 
 - added tests
 - Add AverageColorHash
 - multiple differen hog variants
 - kernels and filters


## [1.0.2] - 24.9.2018

### Added
- .editorconfig file for github aesthetics

### Changed 
- added xml header to pom allowing for valid resolve via maven


## [1.0.1] - 4.8.2018

### Changed
- removed example dependencies from compiled repository jars

## [1.0.0] - 4.8.2018
- Initial version pushed to Bintray and JCenter
### Changed
- Updated javadocs to comply with maven javadoc plugin
- Smaller bugfixed mainly for the examples

## [0.1.0] - 3.8.2018
### Added
- BinaryTree class to save & compare precomputed hashes
- UnitTests for hash algorithms and basic matchers
- Examples
	- Extensive gui example
- Algorithm identifiers preventing mismatching hashes to be compared
- InMemoryImageMatcher to match a batch of images
- Added more default presets for the default matchers.

### Changed
- Preparation for maven distribution. Changed package structure
- Using a dedicated Hash class instead of a BigInteger to represent hash results
- Renamed ImageMatcher to SingleImagematcher

## [0.0.8] - 
### Added
- MIT License
- usage of changelog